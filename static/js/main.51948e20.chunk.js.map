{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["app","Clarifai","App","apiKey","data","ImageForm","image","box","this","props","errors","imgState","src","image_src","alt","style","width","height","id","face","length","map","className","key","top_row","position","top","bottom","bottom_row","left","left_col","right","right_col","type","onKeyPress","update","React","Component","setSource","event","faces","setState","target","value","hide","error","models","predict","then","response","number","outputs","regions","push","region_info","bounding_box","catch","state","params","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAGMA,EAAM,I,OAAIC,EAASC,KAAI,CAACC,OAAQ,qCAChCC,EAAK,CACT,UAAa,CACT,OAAU,CACN,MAAS,KAEb,KAAQ,CACJ,MAAS,KAObC,E,iLAEF,IAAIC,EAAM,GACNC,EAAI,GAkBR,OAhBED,EADEE,KAAKC,MAAMC,OACP,8DAEFF,KAAKC,MAAME,SACP,GAEA,yBAAKC,IAAKJ,KAAKC,MAAMI,UAAWC,IAAI,MAAMC,MAAO,CAACC,MAAM,QAAQC,OAAO,QAASC,GAAG,UAGzFV,KAAKC,MAAMU,KAAKC,QAAQ,IAC1Bb,EAAIC,KAAKC,MAAMU,KAAKE,IAAI,SAAAF,GACtB,OACE,yBAAKG,UAAU,eAAeC,IAAKJ,EAAKK,QAAST,MAAO,CAACU,SAAS,WAAWC,IAAI,GAAD,OAAiB,IAAbP,EAAKK,QAAT,KAAwBG,OAAO,GAAD,OAAI,IAAqB,IAAhBR,EAAKS,WAAd,KAAiCC,KAAK,GAAD,OAAkB,IAAdV,EAAKW,SAAT,KAAyBC,MAAM,GAAD,OAAI,IAAoB,IAAfZ,EAAKa,UAAd,WAMrL,yBAAKV,UAAU,QACb,yBAAKA,UAAU,SACb,2BAAOW,KAAK,OAAOC,WAAY1B,KAAKC,MAAM0B,SAC1C,0BAAMb,UAAU,cAChB,0BAAMA,UAAU,QAChB,6CAEF,yBAAKA,UAAU,aACZhB,EACAC,Q,GA/Ba6B,IAAMC,WA6EfnC,E,YAtCb,aAAc,IAAD,8BACX,+CAQFoC,UAAU,SAACC,GACT,IAAIC,EAAM,GACO,UAAdD,EAAMhB,MACP,EAAKkB,SAAS,CAAC7B,IAAI2B,EAAMG,OAAOC,MAAMC,MAAK,EAAMC,OAAM,EAAML,MAAM,KACnExC,EAAI8C,OAAOC,QAAQ,mCAAmCR,EAAMG,OAAOC,OAC5DK,KAAK,SAAAC,GACF,IAAK,IAAIC,KAAUD,EAASE,QAAQ,GAAG/C,KAAKgD,QACxCZ,EAAMa,KAAKJ,EAASE,QAAQ,GAAG/C,KAAKgD,QAAQF,GAAQI,YAAYC,cAEpE,EAAKd,SAAS,CAACD,MAAMA,MAExBgB,MAAM,WACH,EAAKf,SAAS,CAACI,OAAM,QAnBjC,EAAKY,MAAM,CACT7C,IAAI,GACJgC,MAAK,EACLC,OAAM,EACNL,MAAM,IANG,E,sEA2BX,OACE,yBAAKlB,UAAU,OACb,kBAAC,IAAD,CACEA,UAAU,QACVoC,OAAQtD,IACV,kBAAC,EAAD,CAAWS,UAAWL,KAAKiD,MAAM7C,IAAKuB,OAAQ3B,KAAK8B,UAAW3B,SAAUH,KAAKiD,MAAMb,KAAMlC,OAAQF,KAAKiD,MAAMZ,MAAO1B,KAAMX,KAAKiD,MAAMjB,a,GAjC1HJ,IAAMC,WC3CJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.51948e20.chunk.js","sourcesContent":["import React from 'react';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nconst app = new Clarifai.App({apiKey: 'f261c4ffb71d453aabb4bc098feb44f9'});\nconst data={\n  \"particles\": {\n      \"number\": {\n          \"value\": 100\n      },\n      \"size\": {\n          \"value\": 3\n      }\n  }\n}\n\n\n\nclass ImageForm extends React.Component{\n  render(){\n    let image='';\n    let box='';\n    if (this.props.errors){\n      image=<p>Sorry We Can't detect any faces</p>\n    } else {\n      if (this.props.imgState){\n        image='';\n      } else {\n        image=<img src={this.props.image_src} alt=\"box\" style={{width:'300px',height:'auto'}} id=\"phone\"/>;\n      }\n    }\n    if (this.props.face.length>=1){\n      box=this.props.face.map(face=>{\n        return (\n          <div className=\"bounding-box\" key={face.top_row} style={{position:'absolute',top:`${face.top_row*100}%`,bottom:`${100-(face.bottom_row*100)}%`,left:`${face.left_col*100}%`,right:`${100-(face.right_col*100)}%`}}></div>\n        );\n      })\n      \n    }\n    return(\n      <div className=\"form\">\n        <div className=\"group\">      \n          <input type=\"text\" onKeyPress={this.props.update}/>\n          <span className=\"highlight\"></span>\n          <span className=\"bar\"></span>\n          <label>Image Url</label>\n        </div>\n        <div className=\"detection\">\n          {image}\n          {box}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      src:'',\n      hide:true,\n      error:false,\n      faces:''\n    };\n  }\n  setSource=(event)=>{\n    let faces=[];\n    if(event.key === 'Enter'){\n      this.setState({src:event.target.value,hide:false,error:false,faces:''});\n      app.models.predict('a403429f2ddf4b49b307e318f00e528b',event.target.value)\n            .then(response => {\n                for (let number in response.outputs[0].data.regions){\n                    faces.push(response.outputs[0].data.regions[number].region_info.bounding_box);\n                }\n                this.setState({faces:faces});\n            })\n            .catch(()=> {\n                this.setState({error:true})\n            });\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <Particles\n          className=\"index\"\n          params={data} />\n        <ImageForm image_src={this.state.src} update={this.setSource} imgState={this.state.hide} errors={this.state.error} face={this.state.faces}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}